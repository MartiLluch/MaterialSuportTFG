import warnings
import pandas as pd
import statsmodels.api as sm
from textwrap import shorten

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” CONFIGURACIÃ“ â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
CSV_PATH = (
    r"Path\to\your\dataset.csv" 
)


warnings.filterwarnings("ignore", category=FutureWarning, module="pandas")

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” FUNCIONS AUXILIARS â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
def regressio_lineal(df, y_col, x_cols, extra=""):
    tmp = df.dropna(subset=[y_col] + x_cols)
    n = len(tmp)
    if n < 10:                                      
        print(f"  Omet {y_col}{extra}: {n} observacions")
        return
    y = tmp[y_col]
    X = sm.add_constant(tmp[x_cols])
    model = sm.OLS(y, X).fit()
    print(f"\nðŸ”· Lineal: {y_col} ~ {x_cols} {extra} (n={n})")
    print(f"RÂ² aj. = {model.rsquared_adj:.3f}")
    print(model.summary().tables[1])


def regressio_logistica(df, y_col, x_cols, threshold=4, ja_binaritzat=False, extra=""):
    tmp = df.dropna(subset=[y_col] + x_cols)
    n = len(tmp)
    if n < 10:
        print(f"  Omet {y_col}{extra}: {n} observacions")
        return
    y_bin = tmp[y_col] if ja_binaritzat else (tmp[y_col] >= threshold).astype(int)
    X = sm.add_constant(tmp[x_cols])
    model = sm.Logit(y_bin, X).fit(disp=False)
    pseudo_r2 = 1 - model.llf / model.llnull
    print(f"\n LogÃ­stica: {y_col} ~ {x_cols} {extra}  (n={n})")
    print(f"Pseudo-RÂ² = {pseudo_r2:.3f}")
    print(model.summary().tables[1])


def mostra_valors_uniques(df, cols, max_len=55):
    print("\nâ”€â”€ Mostra valors Ãºnics actuals â”€â”€")
    for c in cols:
        vals = ", ".join(map(str, df[c].dropna().unique()))
        print(f"{c:<18}: {shorten(vals, max_len)}")

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” LECTURA I FILTRAT â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
df = pd.read_csv(CSV_PATH)
print(f"\nâ”€â”€ DesprÃ©s de carregar CSV â”€â”€  {df.shape}")

df = df[df["Quin Ã©s el teu rol a la teva instituciÃ³ educativa?"]
        .str.lower().str.contains("estudiant", na=False)].copy()
print(f"â”€â”€ DesprÃ©s de filtre 'estudiant' â”€â”€  {df.shape}")

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” RENOMBRAT CURT â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
col_map = {
    "En una escala de lâ€™1 al 5, amb quina freqÃ¼Ã¨ncia utilitzes eines dâ€™IA (per exemple, ChatGPT) per a tasques acadÃ¨miques?": "freq_Ãºs",
    "En una escala de lâ€™1 al 5, com valoraries el teu coneixement i comprensiÃ³ de les eines dâ€™IA (per exemple, ChatGPT) per a finalitats acadÃ¨miques?": "coneixement",
    "En quina mesura creus que les eines dâ€™IA tâ€™ajuden a comprendre temes acadÃ¨mics complexos?": "comprensio",
    "DesprÃ©s dâ€™estudiar amb assistÃ¨ncia dâ€™IA, quant de temps retens normalment el material aprÃ¨s en comparaciÃ³ amb mÃ¨todes dâ€™estudi tradicionals?": "retenciÃ³",
    "Creus que les eines dâ€™IA (per exemple, ChatGPT) milloren la teva experiÃ¨ncia general dâ€™aprenentatge?": "millora_experiencia",
    "En una escala de lâ€™1 al 5, en quina mesura creus que les eines dâ€™IA milloren el teu rendiment acadÃ¨mic?": "rendiment",
    "Com de segur et sents explicant el material que has aprÃ¨s a classe sense cap ajuda externa (incloent-hi eines dâ€™IA)?": "confianÃ§a",
    "Creus que la teva comprensiÃ³ de temes complexos Ã©s mÃ©s profunda quan estudies amb eines dâ€™IA en comparaciÃ³ amb mÃ¨todes dâ€™estudi tradicionals (sense IA)?": "profunditat",
    "Al teu entendre, com de forta Ã©s la correlaciÃ³ entre la freqÃ¼Ã¨ncia dâ€™Ãºs dâ€™eines dâ€™IA i el teu rendiment acadÃ¨mic (per exemple, notes dâ€™exÃ mens, puntuacions de tasques)?": "correlacio",
    "En quina mesura estÃ s dâ€™acord amb la segÃ¼ent afirmaciÃ³: 'Quan faig servir eines dâ€™IA amb regularitat, tendeixo a dependre mÃ©s dâ€™elles per resoldre problemes i aprendre, en lloc de fer-ho amb les meves prÃ²pies habilitats cognitives.'": "dependencia",
    "Si en un examen final et deixen escollir entre portar els teus apunts de l'assignatura o fer Ãºs del ChatGPT, quÃ¨ triaries?": "tria_examen",
    "Si no poguessis utilitzar eines dâ€™IA durant un semestre, com creus que afectaria el teu rendiment acadÃ¨mic?": "impacte_semestre",
}
df.rename(columns=col_map, inplace=True)

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” MAPATGES (sense inplace) â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
retencio_map = {
    "Menys temps que amb mÃ¨todes tradicionals": 1,
    "Una mica menys de temps": 2,
    "El mateix temps": 3,
    "Una mica mÃ©s de temps": 4,
    "MÃ©s temps que amb mÃ¨todes tradicionals": 5,
}
impacte_map = {
    "No m'afectaria gens": 5,
    "M'afectaria una mica": 4,
    "M'afectaria moderadament": 3,
    "M'afectaria bastant": 2,
    "M'afectaria molt": 1,
}
millora_map = {"No": 1, "Potser": 3, "SÃ­": 5}

maps = {
    "retenciÃ³": retencio_map,
    "impacte_semestre": impacte_map,
    "millora_experiencia": millora_map,
}
for col, mp in maps.items():
    if col in df.columns:
        df[col] = df[col].replace(mp)

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” CONVERSIÃ“ NUMÃˆRICA â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
numeric_cols = list(maps.keys()) + [
    "freq_Ãºs", "coneixement", "comprensio", "rendiment", "confianÃ§a",
    "correlacio", "dependencia", "profunditat"
]
for c in numeric_cols:
    if c in df.columns:
        df[c] = pd.to_numeric(df[c], errors="coerce", downcast="float")

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” BINARITZACIÃ“ TRIA EXAMEN â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
VALORS_BONS_TRIA = ["Apunts", "ChatGPT"]
df = df[df["tria_examen"].isin(VALORS_BONS_TRIA)].copy()
df["tria_chatgpt"] = (df["tria_examen"] == "ChatGPT").astype(int)

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” DEBUG CURT â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
mostra_valors_uniques(df, numeric_cols + ["tria_examen"])

print(f"\nâ”€â”€ DesprÃ©s de filtrar tria_examen â”€â”€ {df.shape}")

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” MODELS â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
regressio_lineal(df, "comprensio", ["freq_Ãºs", "coneixement"])
regressio_lineal(df, "retenciÃ³",   ["freq_Ãºs", "coneixement", "millora_experiencia"])
regressio_lineal(df, "confianÃ§a",  ["freq_Ãºs", "coneixement"])
regressio_lineal(df, "rendiment",  ["freq_Ãºs", "coneixement", "correlacio"])

regressio_logistica(df, "dependencia",
                    ["freq_Ãºs", "coneixement", "millora_experiencia"])

regressio_logistica(df, "profunditat",
                    ["freq_Ãºs", "coneixement", "correlacio"])

# â€” 4.1 â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
regressio_lineal(
    df,
    "rendiment",
    ["coneixement", "freq_Ãºs", "comprensio", "dependencia"],
    extra=" (Model informe 4.1)"
)

# â€” 4.2 â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
regressio_logistica(
    df,
    "tria_chatgpt",
    ["freq_Ãºs", "coneixement", "impacte_semestre", "confianÃ§a", "dependencia"],
    ja_binaritzat=True,
    extra=" (Model informe 4.2)"
)

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” DISTRIBUCIONS FINALS â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
print("\nDistribuciÃ³ 'dependencia':")
print(df["dependencia"].value_counts(dropna=False))